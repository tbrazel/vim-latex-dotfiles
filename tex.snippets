# Basic commands for faster LaTeX in Vim
# These use the UltiSnips package: https://github.com/SirVer/ultisnips
#
# Some references:
#	castel.dev's blog post on TeX + Vim
#	Hotschke's vim stackexchange post for math-aware ultisnips https://vi.stackexchange.com/a/18494/

priority 10

global !p

import re

# Checks if a string is a backslash. Used in snippets where you want to expand after a backslash
def isbackslash(string):
    if string == '\\':
	    return ''
    return string

# Functions for adding optional superscripts for sums, products, etc.
def superscriptstart(t):
	if t:
		return '^{'
	return ''
def superscriptend(t):
	if t:
		return '}'
	return ''

# Function mapping Roman letter to Greek letter. Mappings obtained from the standard Greek alphabet keyboard

greekDict = {'a': 'alpha', 'b': 'beta', 'c': 'xi', 'd': 'delta', 'e': 'epsilon', 'f': 'phi', 'g': 'gamma', 'h': 'eta', 'i': 'iota', 'k': 'kappa', 'l': 'lambda', 'm': 'mu', 'n': 'nu', 'o': 'omega', 'p':     'pi', 'q': 'theta', 'r': 'rho', 's': 'sigma', 't': 'tau', 'u': 'upsilon', 'v': 'omega', 'w': 'omega',     'x': 'chi', 'y': 'psi', 'z': 'zeta'}


def greeklet(string):
	lower = string.lower()
	if lower in greekDict:
		if string.isupper():
			return greekDict[lower].capitalize()
		else:
			return greekDict[lower]
	else:
		return 'ERR'

endglobal


global !p

# See https://vi.stackexchange.com/a/18494/
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texMathZones += ['texMathZone'+x for x in ['E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS']]
texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

def isMath():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    if not set(texIgnoreMathZoneIds).isdisjoint(synstackids):
        return False
    return not set(texMathZoneIds).isdisjoint(synstackids)

def prose():
	return not isMath()


# Python code for expanding nxn tikz commutative diagrams
def tikzcd(snip):
	digits = snip.buffer[snip.line].split('x')
	rows = int(digits[0])
	columns = int(digits[1])
	snip.buffer[snip.line] = ''
	row = []
	for i in range(0,rows):
		irow = '\t' + ' & '.join(['$' + str(i*columns+j+1) for j in range(columns)]) + '\\\\\\\\' + '\n'
		row.append(irow)
	output = '\\[ \\begin{tikzcd}\n' + ''.join(row) + '\\end{tikzcd} \\]\n$0'
	snip.expand_anon(output)

# Code for creating pmatrices of arbitrary size
def matrix(snip):
	output = ''
	line = snip.buffer[snip.line]

	start = int(snip.snippet_start[1])
	end = int(snip.snippet_end[1])

	start_of_line = line[0:start]
	snip_match = line[start:end]

	# Get type of matrix
	matx_letter = str(snip_match[:1])
	dimension = snip_match[1:]
	
	# Get dimension of pmatrix
	digits = dimension.split('x')
	rows = int(digits[0])
	columns = int(digits[1])

	# Keep the whole line before the snippet match
	snip.buffer[snip.line] = start_of_line

	output = '\\\\begin{' + matx_letter + 'matrix}'
	for i in range(0,rows):
		output = output + '\n' + ' & '.join(['$' + str(i*columns + j+1) for j in range(columns)]) + '\\\\\\\\'
	
	output = output + '\n\\\\end{' + matx_letter + 'matrix}'
	snip.expand_anon(output)

# Code for creating tikzcd with ampersand replacement
def tikz_amp(snip):
	output = ''
	line = snip.buffer[snip.line]

	start = int(snip.snippet_start[1])
	end = int(snip.snippet_end[1])

	start_of_line = line[0:start]
	snip_match = line[start:end]
	
	# Get dimension of pmatrix
	digits = snip_match.split('x')
	rows = int(digits[0])
	columns = int(digits[1])

	# Keep the whole line before the snippet match
	snip.buffer[snip.line] = start_of_line

	row = []
	for i in range(0,rows):
		irow = '\t' + ' & '.join(['$' + str(i*columns+j+1) for j in range(columns)]) + '\\\\\\\\' + '\n'
		row.append(irow)

	output = '\\\\begin{tikzcd}[ampersand replacement = \\\\&]\n' + ''.join(row) + '\\end{tikzcd}\n$0'
	snip.expand_anon(output)

endglobal

##############################################

# Custom Tikz Snippets #

##############################################

#############
#### Math
#############

context "isMath()"
snippet '`([a-zA-Z])' "auto greek letter" rA
\\`!p snip.rv = greeklet(match.group(1))`$0
endsnippet

snippet mk "Math" wA
\$$1\$
endsnippet

context "isMath()"
snippet ,, "ldots" iA
, \\ldots, $0
endsnippet

# Particular regex to expand things of the form a_1, \ldots, a_n or \alpha_1, \ldots \alpha_n:
#	Expand by writing a_.
#	This regex is rough, and this snippet is not to be used widely, only in particular cases
context "isMath()"
snippet '([\s\d\",._=\$\/\(\)\{\}\[\]]|^)([a-zA-Z]+|\\[a-zA-Z]+)\_\.' "list of subscripts" rA
`!p snip.rv = match.group(1) + match.group(2)`_1, \\ldots, `!p snip.rv = match.group(2)`_$0
endsnippet

context "isMath()"
snippet ++ "ldots plus" iA
+ \\ldots + $0
endsnippet

context "isMath()"
snippet :: "projective coordinates" iA
: \\ldots : $0
endsnippet

# For use in align environments
context "isMath()"
snippet ==  "equals" iA
&= $0
endsnippet

context "prose()"
snippet ii "item" bA
\\item $0
endsnippet

context "prose()"
snippet [[ "display math" bA
\\begin{align*}
	$1
\\end{align*}
$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=\$\/\(\)\{\}\[\]\\]|^):' "set condition" r
`!p snip.rv = isbackslash(match.group(1))`\\ : \\ $0
endsnippet

# Regex Explanation:
#	Match an asterisk not preceded by an underscore _ or the word "align"
#	This avoids issues where you accidentally delete the asterisk in "align*" and can't retype it since you are in math mode
context "isMath()"
snippet '(?<!\_)(?<!align)\*' "superscript asterisk" rA
^\\ast
endsnippet

context "isMath()"
snippet '(_\*)' "subscript asterisk" rA
_\\ast
endsnippet

context "isMath()"
snippet {{ "set" iA
\\left\\{ $1 \\right\\}$0
endsnippet

context "isMath()"
snippet >> ">>" iA
\\gg
endsnippet

context "isMath()"
snippet << "<<" iA
\\ll
endsnippet

context "isMath()"
snippet "([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)([a-zA-Z])bar" "Automatic overline bar" riA
`!p snip.rv = isbackslash(match.group(1))`\\bar{`!p snip.rv=match.group(2)`}
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)bar' "overline bar environment" r
`!p snip.rv = isbackslash(match.group(1))`\\bar{$1}$0
endsnippet

# RIP Regex
context "isMath()"
snippet '(\\)((A|a)lpha|(B|b)eta|(X|x)i|(D|d)elta|(E|e)psilon|(P|p)hi|(G|g)amma|(E|e)ta|(I|i)ota|(K|k)appa|(L|l)ambda|(M|m)u|(N|n)u|(O|o)mega|(P|p)i|(T|t)heta|(R|r)ho|(S|s)igma|(T|t)au|(U|u)psilon|(O|o)mega|(C|c)hi|(P|p)si|(Z|z)eta)b' "greek letter bar" rA
\\bar{\\`!p snip.rv = match.group(2)`}
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)bb([A-Z])' "math blackboard automatic" rA
`!p snip.rv = isbackslash(match.group(1))`\\mathbb{`!p snip.rv = match.group(2)`}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)bbm([\d])' "math blackboard automatic" rA
`!p snip.rv = isbackslash(match.group(1))`\\mathbbm{`!p snip.rv = match.group(2)`}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)bcap' "bigcap environment" r
`!p snip.rv = isbackslash(match.group(1))`\\bigcap_{${1:n=1}}`!p snip.rv = superscriptstart(t[2])`${2:}`!p snip.rv = superscriptend(t[2])` $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)bcup' "Big cup environment" r
`!p snip.rv = isbackslash(match.group(1))`\\bigcup_{${1:n=1}}^{${2:\infty}} $0
endsnippet

context "prose()"
snippet '([\s\,\.`\$\(\)\[\]\{\}\-]|^)bf' "bold" riw
`!p snip.rv = match.group(1)`\\textbf{$1}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)bf' "bold" r
`!p snip.rv = isbackslash(match.group(1))`\\mathbf{$1}$0
endsnippet

context "isMath()"
snippet bmat "bmat" i
\\begin{bmatrix} $1 \\end{bmatrix} $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)cal' "math cal" r
`!p snip.rv = isbackslash(match.group(1))`\\mathcal{${1:C}}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)cal([A-Z])' "math cal automatic" rA
`!p snip.rv = isbackslash(match.group(1))`\\mathcal{`!p snip.rv = match.group(2)`}$0
endsnippet

context "isMath()"
snippet '([\s\d\",.\$\/\(\)\{\}\[\]\\]|^)cap' "\Cap environment" r
`!p snip.rv = isbackslash(match.group(1))`\\cap_{${1:n=1}}^{${2:\infty}} $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)capp' "cap cdots.." rA
`!p snip.rv = isbackslash(match.group(1))`\\cap \\cdots \\cap$0
endsnippet

context "isMath()"
snippet case "cases"
\\begin{cases} $1 & $2 \\\\ $3 & $4 \\end{cases}
endsnippet

context "isMath()"
snippet cd "cdots"
\\cdots $0
endsnippet

context "isMath()"
snippet ceil "ceiling" i
\\left\\lceil $1 \\right\\rceil $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)cup' "\Cup environment" r
`!p snip.rv = isbackslash(match.group(1))`\\cup_{${1:n=1}}^{${2:\infty}} $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)cupp' "cup cdots.." rA
`!p snip.rv = isbackslash(match.group(1))`\\cup \\cdots \\cup$0
endsnippet


snippet dm "Display Math" bwA
\\[
	$1
\\]
$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)es' "Empty set" rA
`!p snip.rv = isbackslash(match.group(1))`\\emptyset$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)fr' "fraction" r
`!p snip.rv = isbackslash(match.group(1))`\\frac{$1}{$2}$0
endsnippet

snippet '([\t\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)fra' "fraction" r
`!p snip.rv = match.group(1) if match.group(1) is not "\\" else ""`\\frac\{$1}\{$2}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)fk' "math frak" r
`!p snip.rv = isbackslash(match.group(1))`\\mathfrak{${1:C}}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)fk([a-zA-Z])' "math frak automatic" rA
`!p snip.rv = isbackslash(match.group(1))`\\mathfrak{`!p snip.rv = match.group(2)`}$0
endsnippet

context "isMath()"
snippet floor "floor" i
\\left\\lfloor $1 \\right\\rfloor$0
endsnippet

snippet fnote "footnote" i
\\footnote{$1}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)frac' "fraction" r
`!p snip.rv = isbackslash(match.group(1))`\\frac{$1}{$2}
endsnippet

# Autofrac - from https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets
context "isMath()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)//' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "isMath()"
snippet "([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)([a-zA-Z])hat" "Automatic hat" riA
`!p snip.rv = isbackslash(match.group(1))`\\hat{`!p snip.rv=match.group(2)`}
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)hat' "math hat environment" r
`!p snip.rv = isbackslash(match.group(1))`\\hat{$1}$0
endsnippet

context "isMath()"
snippet '(\\)((A|a)lpha|(B|b)eta|(X|x)i|(D|d)elta|(E|e)psilon|(P|p)hi|(G|g)amma|(E|e)ta|(I|i)ota|(K|k)appa|(L|l)ambda|(M|m)u|(N|n)u|(O|o)mega|(P|p)i|(T|t)heta|(R|r)ho|(S|s)igma|(T|t)au|(U|u)psilon|(O|o)mega|(C|c)hi|(P|p)si|(Z|z)eta)h' "greek letter hat" rA
\\hat{\\`!p snip.rv = match.group(2)`}
endsnippet


context "isMath()"
snippet inf "infimum" w
\\inf_{${1:x\in X}} $0
endsnippet

context "isMath()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "prose()"
snippet '([\s\,\.`\$\(\)\[\]\{\}\-]|^)it' "italic" r
`!p snip.rv = match.group(1)`\\textit{$1}$0
endsnippet

context "isMath()"
snippet '([\s\,\.\$\(\)\{\}\[\]\-]|^)it' "italic" r
`!p snip.rv = match.group(1)`\\mathit{$1}$0
endsnippet
# TODO double check this is correct for LaTeX

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)l\(' "left parentheses" riA
`!p snip.rv = isbackslash(match.group(1))`\\left( $1 \\right)
endsnippet

context "isMath()"
snippet l[ "left sq bracket" iA
\\left[ $1 \\right]$0
endsnippet

context "isMath()"
snippet l| "left abs" iA
\\left| $1 \\right|$0
endsnippet

context "isMath()"
snippet l; "left brace" iA
\\left\\{ $1 \\right\\}
endsnippet

context "isMath()"
snippet lp "left par" A
\\left( $1 \\right)
endsnippet


context "isMath()"
snippet ld "ldots"
\\ldots $0
endsnippet

context "isMath()"
snippet lim "limit" w
\\lim_{${1:n} \\to ${2:\\infty}}
endsnippet

context "isMath()"
snippet liminf "liminf" w
\\limsup_{${1:n} \\to ${2:\\infty}}
endsnippet

context "isMath()"
snippet limsup "limsup" w
\\limsup_{${1:n} \\to ${2:\\infty}}
endsnippet

context "isMath()"
snippet '([\s\d,.=\-\$\/\(\)\|\{\}\[\]\\]|^)lr' "lrangle" rA
`!p snip.rv = isbackslash(match.group(1))`\\left\\langle $1 \\right\\rangle$0
endsnippet

context "isMath()"
snippet \\mapsto "&mapsto" iA
&\\mapsto
endsnippet

context "isMath()"
snippet '([\s\d,.=\-\$\/\(\)\|\{\}\[\]\\]|^)mod' "modulo" ir
`!p snip.rv = isbackslash(match.group(1))`\\equiv $1 \\pmod{$2}
endsnippet

context "isMath()"
snippet nl "new line" A
\\\\
&${1:=} $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)ns' "normal subgroup" r
`!p snip.rv = isbackslash(match.group(1))`\\nsubgp 
endsnippet


context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)op' "oplus" r
`!p snip.rv = isbackslash(match.group(1))`\\oplus$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)op_' "oplus subscript" rA
`!p snip.rv = isbackslash(match.group(1))`\\oplus_{$1}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)opp' "oplus plus.." rA
`!p snip.rv = isbackslash(match.group(1))`\\oplus \\ldots \\oplus$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)ot' "otimes" r
`!p snip.rv = isbackslash(match.group(1))`\\otimes$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)ot_' "otimes subscript" rA
`!p snip.rv = isbackslash(match.group(1))`\\otimes_{$1}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)ott' "otimes times.." rA
`!p snip.rv = isbackslash(match.group(1))`\\otimes \\cdots \\otimes$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)ov' "overset" r
`!p snip.rv = isbackslash(match.group(1))`\\overset{${1:above}}{${2:below}}$0
endsnippet

context "isMath()"
snippet part "d/dx" w
\\frac{\\partial ${1:f}}{\\partial ${2:x}}$0
endsnippet

context "isMath()"
snippet pmat "Parentheses matrix" i
\\begin{pmatrix} $1 \\end{pmatrix} $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)prod' "Product environment" wr
`!p snip.rv = isbackslash(match.group(1))`\\prod_{${1:n=1}}`!p snip.rv = superscriptstart(t[2])`${2:\\infty}`!p snip.rv = superscriptend(t[2])` $0
endsnippet

context "isMath()"
snippet qq "quad quad" A
\\quad\\quad $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]]|^)res' "restriction" rA
`!p snip.rv =match.group(1)`\\left. $1 \\right|_{ $2 }$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sb' "subset" r
`!p snip.rv = isbackslash(match.group(1))`\\subseteq 
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sbn' "subsetneq" r
`!p snip.rv = isbackslash(match.group(1))`\\subsetneq 
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sc' "math script" r
`!p snip.rv = isbackslash(match.group(1))`\\mathscr{${1:C}}$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sc([A-Z])' "math script automatic" rA
`!p snip.rv = isbackslash(match.group(1))`\\mathscr{`!p snip.rv = match.group(2)`}$0
endsnippet

context "prose()"
snippet sec "section" b
\\section{$1}

$0
endsnippet

context "isMath()"
snippet SES "short exact sequence" i
0 \to ${1:A} \xto{${2:f}} ${3:B} \xto{${4:g}} ${5:C} \to 0${6:,}$0
endsnippet

context "prose()"
snippet subsec "subsection" bA
\\subsection{$1}

$0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sp' "supset" r
`!p snip.rv = isbackslash(match.group(1))`\\supseteq 
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)spn' "supsetneq" r
`!p snip.rv = isbackslash(match.group(1))`\\supsetneq 
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sq' "Square Root" ir
`!p snip.rv = isbackslash(match.group(1))`\\sqrt{$1}$0
endsnippet

context "isMath()"
snippet sqc "square class" iA
$1^\\times / \\left( $1^\\times \\right)^2
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sto' "isomorphic arrow" rA
`!p snip.rv = isbackslash(match.group(1))`\\xto{\\sim} 
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)sum' "\Sum environment" r
`!p snip.rv = isbackslash(match.group(1))`\\sum_{${1:n=1}}`!p snip.rv = superscriptstart(t[2])`${2:\\infty}`!p snip.rv = superscriptend(t[2])` $0
endsnippet

context "isMath()"
snippet '([\s\d\",._=:\$\/\(\)\|\{\}\[\]\\]|^)til' "overline tilde environment" r
`!p snip.rv = isbackslash(match.group(1))`\\widetilde{$1}$0
endsnippet

context "isMath()"
snippet '(\\)((A|a)lpha|(B|b)eta|(X|x)i|(D|d)elta|(E|e)psilon|(P|p)hi|(G|g)amma|(E|e)ta|(I|i)ota|(K|k)appa|(L|l)ambda|(M|m)u|(N|n)u|(O|o)mega|(P|p)i|(T|t)heta|(R|r)ho|(S|s)igma|(T|t)au|(U|u)psilon|(O|o)mega|(C|c)hi|(P|p)si|(Z|z)eta)t' "greek letter tilde" rA
\\til{\\`!p snip.rv = match.group(2)`}
endsnippet

context "isMath()"
snippet \\to "&to" iA
&\\to
endsnippet

context "isMath()"
snippet vmat "Vertical Matrix" i
\\begin{vmatrix} $1 \\end{vmatrix} $0
endsnippet

context "isMath()"
snippet xx "cross" iA
^\\times
endsnippet

################
### Tikzcd and matrices of arbitrary size
################

snippet pbup "tikz diagram: pullback, universal property" b
\\[ \\begin{tikzcd}
	$1\ar[dr,${2:dashed,} "$3"]\ar[drr,bend left=30, "$4$ above right]\ar[ddr,bend right=30, "$5" below left] && \\\\
	& $6\rar["$7" above]\dar["$8" left]\pb & $9\dar["$10" right] \\\\
	& $11\rar["$12" below] & $13
\\end{tikzcd} \\]
$0

endsnippet

# Calls the Python tikzcd function to create an mxn diagram 
post_jump "tikzcd(snip)"
snippet 't(\d+x\d+)' "tikz mxn diagram" br
`!p snip.rv = match.group(1)`
endsnippet

# As a special case of the snippet above, produce a square nxn diagram
post_jump "tikzcd(snip)"
snippet 't(\d+)' "tikz nxn diagram" br
`!p snip.rv = match.group(1) + 'x' + match.group(1)`
endsnippet

# Makes tikzcd with ampersand replacement of size mxn
post_jump "tikz_amp(snip)"
snippet 'tam(\d+x\d+)' "mxn pmatrix" r
`!p snip.rv = match.group(1)`
endsnippet

# Makes square tikzcd with ampersand replacement of size mxn
post_jump "tikz_amp(snip)"
snippet 'tam(\d+)' "mxn pmatrix" r
`!p snip.rv = match.group(1) + 'x' + match.group(1)`
endsnippet

# Makes [bpv]matrix of arbitrary size
post_jump "matrix(snip)"
snippet '([bpv]\d+x\d+)' "mxn pmatrix" r
`!p snip.rv = match.group(1)`
endsnippet

# Makes square matrix
post_jump "matrix(snip)"
snippet '([bpv])(\d+)' "square pmatrix" r
`!p snip.rv = match.group(1) + match.group(2) + 'x' + match.group(2)`
endsnippet


##

snippet tpic "Tikz picture environment" b
\\begin{figure}
	\\begin{tikzpicture}[h]
	$1
	\\end{tikzpicture}
	\\centering
\\end{figure}
$0
endsnippet



############
# Text Replacement
############

snippet Cech "Cech" A
\\v{C}ech
endsnippet

snippet etale "etale" A
\\'etale
endsnippet

snippet iff "if and only if"
if and only if
endsnippet

snippet Kahler "Kahler" A
K\\"{a}hler
endsnippet




# vim:ft=snippets:
